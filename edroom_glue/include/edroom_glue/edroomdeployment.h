//##############################################################################
//###############     This file has been generated by EDROOM     ###############
//##############################################################################
 
#ifndef EDROOMDEPLOYMENT_H_
#define EDROOMDEPLOYMENT_H_
 
#include <edroom_glue/edroomdf.h>
#include <public/edroomsl_iface_v1.h>
#include <edroom_glue/edroom_can_drv.h>
 
 
#include "public/pi_free_can_drv.h"
//******************************************************************************
// include deployment edroom components
 
#include <public/icuasw_iface_v1.h>
#include <public/ccepdmanager_iface_v1.h>
#include <public/cctm_channelctrl_iface_v1.h>
#include <public/rcchk_fdirmng_iface_v1.h>
#include <public/rccbkgtcexec_iface_v1.h>
// ***********************************************************************
// class CEDROOMSystemMemory
// ***********************************************************************
 
class CEDROOMSystemMemory{
 
	//!Messages Memory of component icuasw
	CEDROOMMessage	icuaswMessages[10];
	bool	icuaswMessagesMarks[10];
	CEDROOMQueue::CQueueNode	icuaswQueueNodes[13];
	bool	icuaswQueueNodesMarks[13];
 
	//!Messages Memory of component ccepdmanager
	CEDROOMMessage	ccepdmanagerMessages[10];
	bool	ccepdmanagerMessagesMarks[10];
	CEDROOMQueue::CQueueNode	ccepdmanagerQueueNodes[11];
	bool	ccepdmanagerQueueNodesMarks[11];
 
	//!Messages Memory of component cctm_channelctrl
	CEDROOMMessage	cctm_channelctrlMessages[10];
	bool	cctm_channelctrlMessagesMarks[10];
	CEDROOMQueue::CQueueNode	cctm_channelctrlQueueNodes[10];
	bool	cctm_channelctrlQueueNodesMarks[10];
 
	//!Messages Memory of component rcchk_fdirmng
	CEDROOMMessage	rcchk_fdirmngMessages[10];
	bool	rcchk_fdirmngMessagesMarks[10];
	CEDROOMQueue::CQueueNode	rcchk_fdirmngQueueNodes[14];
	bool	rcchk_fdirmngQueueNodesMarks[14];
 
	//!Messages Memory of component rccbkgtcexec
	CEDROOMMessage	rccbkgtcexecMessages[10];
	bool	rccbkgtcexecMessagesMarks[10];
	CEDROOMQueue::CQueueNode	rccbkgtcexecQueueNodes[11];
	bool	rccbkgtcexecQueueNodesMarks[11];
 
	public:
 
	ICUASW::CEDROOMMemory icuaswMemory;
	CCEPDManager::CEDROOMMemory ccepdmanagerMemory;
	CCTM_ChannelCtrl::CEDROOMMemory cctm_channelctrlMemory;
	RCCHK_FDIRMng::CEDROOMMemory rcchk_fdirmngMemory;
	RCCBKGTCExec::CEDROOMMemory rccbkgtcexecMemory;
 
//!Set Memory
	void SetMemory();
};
 

// ***********************************************************************
// class CEDROOMRemoteConnection
// ***********************************************************************

class CEDROOMRemoteConnection{

friend class CEDROOMRemoteCommSAP;

	//! connection channel 1
	CEDROOMRemoteTXChannel m_Channel1;
	//! connection channel 2
	CEDROOMLocalTXChannel m_Channel2;


};


//******************************************************************************
/*!
 * \class CEDROOMRemoteCommSAP
 * \brief This class implements the EDROOM local communication service access
 * point
 *
 * \author Oscar Rodriguez Polo
 */
//******************************************************************************

class CEDROOMRemoteCommSAP{


public:


	/*!
    * \brief register the Interface
    * \param id interface local identifier
    * \param interface reference to the interface
    * \param pComponent pointer to the component
    * \return a value !=0 if there is an error
    */
	TEDROOMInt32 RegisterInterface( TEDROOMInterfaceID id
						, CEDROOMInterface & interface
						, CEDROOMComponent* pComponent);


	/*!
    * \brief Connect the components interfaces
    * \param interfaceicuasw reference to component 1 interface
    * \param interfaceccepdmanager reference to component 2 interface
    * \param connection reference to the object that handles the connection
    * \param icuaswToccepdmanagerSignalTranslator component1 to component2 signal
    * 			translator
    * \param ccepdmanagerToicuaswSignalTranslator component2 to component1 signal
    * 			translator
    */
	void Connect(CEDROOMInterface & interfaceicuasw
				,CEDROOMInterface & interfaceccepdmanager
				,CEDROOMRemoteConnection &connection
				,TEDROOMSignal  (icuaswToccepdmanagerSignalTranslator) (TEDROOMSignal)
				,TEDROOMSignal  (ccepdmanagerToicuaswSignalTranslator) (TEDROOMSignal));


};

class CEDROOMSystemCommSAP{
 
	 friend class CEDROOMSystemDeployment;
//!Communication Service Access Point
 
	CEDROOMLocalCommSAP m_localCommSAP;
	CEDROOMRemoteCommSAP m_remoteCommSAP;
 
//!Conections
 
	CEDROOMLocalConnection connections[1];
	CEDROOMRemoteConnection remote_connections[4];
 
//!Components

	static ICUASW   * mp_icuasw;
	static CCEPDManager   * mp_ccepdmanager;
	static CCTM_ChannelCtrl   * mp_cctm_channelctrl;
	static RCCHK_FDIRMng   * mp_rcchk_fdirmng;
	static RCCBKGTCExec   * mp_rccbkgtcexec;
 
 
//!Set Components
 
	void SetComponents(ICUASW   *p_icuasw,
							CCEPDManager   *p_ccepdmanager,
							CCTM_ChannelCtrl   *p_cctm_channelctrl,
							RCCHK_FDIRMng   *p_rcchk_fdirmng,
							RCCBKGTCExec   *p_rccbkgtcexec);
 
 
//Signal Conversion
 
	static TEDROOMSignal C5BKGTCExec_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl3(TEDROOMSignal signal);
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl3__C5BKGTCExec_PTMChannelCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PBKGExecCtrl__C5BKGTCExec_PBKGExecCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C5BKGTCExec_PBKGExecCtrl__C2EPDManager_PBKGExecCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PHK_FDIRCtrl__C4HK_FDIRMng_PHK_FDIRCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C4HK_FDIRMng_PHK_FDIRCtrl__C2EPDManager_PHK_FDIRCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl2__C4HK_FDIRMng_PTMChannelCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C4HK_FDIRMng_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl2(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl__C2EPDManager_PTMChannelCtrl(TEDROOMSignal signal);
 
 
//!Register Interfaces
	void RegisterInterfaces();
 
//!Set Local Connections
	void SetLocalConnections();
 
//!Set Remote Connections
	void SetRemoteConnections();
 
//!Set Connections
	void SetConnections();	
	
	// ********************************
	// Handling CAN IRQ vector 0x1C

	//! Event for trigger the bottom half associated to the IRQ
	static Pr_IRQEvent	RemoteCommEventIRQ;
	//! Binary Semaphore for signal the end of the bottom half of the IRQ
	static Pr_SemaphoreBin	RemoteCommSemEndIRQ;
		//! IRQ Handler for the IRQ
	static Pr_IRQHandler_RetType	RemoteCommIRQHandler(void);

	//! Bottom Half Task Function for the IRQ
	static Pr_TaskRV_t 	RemoteCommIRQBottomHalfTask(Pr_TaskP_t);



 
};
 
class CEDROOMSystemDeployment{
 
//!Kernel
	Pr_Kernel	kernel;
 
#ifdef CONFIG_EDROOMDEPLOYMENT_NEED_TASK
 
//!Main Task
static Pr_TaskRV_t main_task(Pr_TaskP_t);
 
#endif
	CEDROOMSystemMemory   systemMemory;
	CEDROOMSystemCommSAP  systemCommSAP;
 
	ICUASW   * mp_icuasw;
	CCEPDManager   * mp_ccepdmanager;
	CCTM_ChannelCtrl   * mp_cctm_channelctrl;
	RCCHK_FDIRMng   * mp_rcchk_fdirmng;
	RCCBKGTCExec   * mp_rccbkgtcexec;
 
	public:
 
	CEDROOMSystemDeployment();
 
//!Deployment Configuration
	void Config(ICUASW   *p_icuasw,
					CCEPDManager   *p_ccepdmanager,
					CCTM_ChannelCtrl   *p_cctm_channelctrl,
					RCCHK_FDIRMng   *p_rcchk_fdirmng,
					RCCBKGTCExec   *p_rccbkgtcexec);
 
//!Deployment Start
	void Start();
 
//!StartComponents
	void StartComponents();
//!Config Components
 
	ICUASW::CEDROOMMemory 		* GeticuaswMemory(){return &systemMemory.icuaswMemory;}
	CCEPDManager::CEDROOMMemory 		* GetccepdmanagerMemory(){return &systemMemory.ccepdmanagerMemory;}
	CCTM_ChannelCtrl::CEDROOMMemory 		* Getcctm_channelctrlMemory(){return &systemMemory.cctm_channelctrlMemory;}
	RCCHK_FDIRMng::CEDROOMMemory 		* Getrcchk_fdirmngMemory(){return &systemMemory.rcchk_fdirmngMemory;}
	RCCBKGTCExec::CEDROOMMemory 		* GetrccbkgtcexecMemory(){return &systemMemory.rccbkgtcexecMemory;}





};
#endif
